#! /bin/sh -e
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: This patch attempts to fix the parsing of C++ stabs involving 
## DP: :: delimiters. 

[ -f debian/patches/00patch-opts ] && . debian/patches/00patch-opts
patch_opts="${patch_opts:--f --no-backup-if-mismatch}"

if [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
       -patch) patch $patch_opts -p1 < $0;;
       -unpatch) patch $patch_opts -p1 -R < $0;;
        *)
                echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
                exit 1;;
esac

exit 0
@DPATCH@

diff -urN valgrind-2.2.0.orig/coregrind/vg_stabs.c valgrind-2.2.0/coregrind/vg_stabs.c
--- valgrind-2.2.0.orig/coregrind/vg_stabs.c	2004-08-29 21:02:28.000000000 +0000
+++ valgrind-2.2.0/coregrind/vg_stabs.c	2004-11-16 18:18:27.000000000 +0000
@@ -402,42 +402,12 @@
    return ret;
 }
 
-static Bool isoperator(Char op)
-{
-   switch(op) {
-   case 'a'...'z':
-   case 'A'...'Z':
-   case '0'...'9':
-   case '_':
-   case ':':
-   case '\'':
-   case '"':
-   case '$':
-      return False;
-      
-   default:
-      return True;
-   }
-}
-
 /* Skip a ':'-delimited name which may have ::, 'char' or other things in
    <> brackets */
 static Char *templ_name(Char *p)
 {
    Int brac = 0;
 
-   /* Special case: if the name is "operatorX", where X is not an
-      otherwise valid operator name, then just skip to the terminating
-      ':' and ignore the '<>' bracketing stuff.  That's because names
-      like "operator<" and "operator<=" can appear here, and it can be
-      terminated by ::. */
-   if (VG_(strncmp)(p, "operator", 8) == 0 && isoperator(p[8])) {
-      p += 8;
-      while(*p != ':')
-	 p++;
-      return p;
-   }
-
    for(;;) {
       if (*p == '<')
 	 brac++;
@@ -862,7 +832,8 @@
 	 UInt off, sz;
 	 SymType *fieldty;
 
-	 end = templ_name(p);
+	 // end = templ_name(p);
+         end = SKIPPAST(p, ':', "method name") - 1;
 
 	 if (end[1] == ':') {
 	    /* c++ method names end in :: */
@@ -1040,7 +1011,9 @@
       VG_(printf)("initSym(si=%p, tab=%p, sym=%p, kind=%d, name=%p \"%s\", val=%d)\n",
 		  si, si->stab_typetab, sym, kind, name, name, val);
 
-   ty = templ_name(name);
+   // ty = templ_name(name);
+   ty = VG_(strchr)(name, ':');
+   while (ty && ty[1] == ':') ty = VG_(strchr)(ty + 2, ':');
 
    len = ty - name;
 
